
CF::Impure = 1
CF::MaxNatural = 2000000

recurseDepth = 1
numPoints = 3//randint(10)+3
polySize = 30
cornerSize = 0
targetScale = 1.65

numDots = 200000
dotSize = 0.5
cPos(n)=rand( -1*polySize, polySize )

//Regular triangle
vP = 0, polySize, -polySize, -polySize, polySize, -polySize

//random triangle
//vP = cPos(), cPos(), cPos(), cPos(), cPos(), cPos()

arc = 360/numPoints

vector2 point ( n ) = polySize*sin(n*arc), polySize*cos(n*arc)

vector2 randpoint () = point ( randint(numPoints) )

vector2 midpoint ( vector2 v1, vector2 v2 ) = (v1[0]+v2[0])/targetScale,(v1[1]+v2[1])/targetScale

startpos = midpoint ( point(0), point(1) )

startshape POLY ( recurseDepth ) [a -0.9]

shape POLY ( natural n )
{
	if ( n > 0 )
	{
		DOT ( startpos, numDots )  [  ]
		
		loop i=numPoints []
		{
			pI=point(i)
			CIRCLE [ x pI[0] y pI[1] s cornerSize]
			POLY ( n--1 )  [ b -1 x pI[0] y pI[1] ]
		}

		CIRCLE [ x startpos[ 0 ] y startpos[ 1 ] s cornerSize h 180 ]
	}
}

shape DOT ( vector2 curr, natural n )
{
	if ( n > 0 )
	{
		CIRCLE [ x curr[0] y curr[1] s dotSize ] 

		next = midpoint ( curr, randpoint() )

		DOT ( next, n--1 ) []
	}	
}
